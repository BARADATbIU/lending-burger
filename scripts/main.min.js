"use strict";

(function () {
  'use strict';

  function initMap() {
    var myMap = new google.maps.Map(document.getElementById("myMap"), {
      zoom: 10,
      center: { lat: 59.94, lng: 30.38 },
      zoomControl: true,
      zoomControlOptions: {
        position: google.maps.ControlPosition.RIGHT_CENTER
      },
      streetViewControl: true,
      streetViewControlOptions: {
        position: google.maps.ControlPosition.RIGHT_CENTER
      },
      fullscreenControl: true,
      fullscreenControlOptions: {
        position: google.maps.ControlPosition.LEFT_TOP
      }
    });

    setMarkers(myMap);
  }

  var markers = [{
    lat: 59.915038,
    lng: 30.486096,
    content: "Товарищеский проспект, 20/27"
  }, {
    lat: 59.94708381,
    lng: 30.38481688,
    content: "Тверская улица, 16"
  }, {
    lat: 59.891295,
    lng: 30.316907,
    content: "Московский проспект, 103к2"
  }, {
    lat: 59.973999,
    lng: 30.311091,
    content: "улица Чапыгина, 13А"
  }];

  function setMarkers(myMap) {
    var image = {
      url: "images/svgicons/map-marker.svg",
      size: new google.maps.Size(46, 57)
    };

    markers.forEach(function (obj) {
      var marker = new google.maps.Marker({
        position: { lat: obj.lat, lng: obj.lng },
        title: "Нажми",
        icon: image,
        map: myMap
      });
      var infowindow = new google.maps.InfoWindow({
        content: obj.content
      });
      marker.addListener("click", function () {
        infowindow.open(marker.get("myMap"), marker);
      });
    });
  }

  function mobileMenu() {
    var navTrigger = document.querySelector(".nav-trigger");
    var trigger = document.querySelector(".nav-trigger__link");
    var navMobile = document.querySelector(".nav-mobile");
    var navItems = navMobile.querySelectorAll(".nav-mobile__item");

    trigger.addEventListener("click", toggleClass);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = navItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var iterator = _step.value;

        iterator.addEventListener("click", toggleClass);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    function toggleClass(e) {
      e.preventDefault();
      navTrigger.classList.toggle("is-active");
      navMobile.classList.toggle("is-active");
    }
  }

  function accordionTeam() {
    var workers = document.querySelectorAll(".worker");
    var teamAccord = document.querySelector(".team__accordion");

    teamAccord.addEventListener("click", function (event) {
      var target = event.target;
      var worker = target.parentNode;
      var content = target.nextElementSibling;
      var contentHeight = content.firstElementChild.clientHeight;

      if (target.classList.contains("worker__name-link")) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = workers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var iterator = _step2.value;

            if (iterator !== worker) {
              iterator.classList.remove("is-active");
              iterator.lastElementChild.style.height = 0;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        if (worker.classList.contains("is-active")) {
          worker.classList.remove("is-active");
          content.style.height = 0;
        } else {
          worker.classList.add("is-active");
          content.style.height = contentHeight + "px";
        }
      }
    });
  }

  function accordionMenu() {
    var menuItems = document.querySelectorAll(".menu__item");
    var menuAccord = document.querySelector(".menu__accordion");

    menuAccord.addEventListener("click", function (event) {
      var target = event.target.parentNode;
      var content = target.nextElementSibling;
      var item = target.parentNode;

      var tarWidth = target.clientWidth;
      var windowWidth = document.documentElement.clientWidth;
      var layoutContentWidth = 520;
      var breakpointPhone = 480;
      var closeMenuWidth = tarWidth * menuItems.length;
      var openMenuWidth = closeMenuWidth + layoutContentWidth;

      if (event.target.classList.contains("menu__title")) {
        moveMenu();
      }

      target = event.target;
      content = target.nextElementSibling;
      item = target.parentNode;

      if (target.classList.contains("menu__link")) {
        moveMenu();
      }

      function moveMenu() {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = menuItems[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var iterator = _step3.value;

            if (iterator != item) {
              iterator.classList.remove("is-active");
              iterator.lastElementChild.style.width = 0;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        if (item.classList.contains("is-active")) {
          item.classList.remove("is-active");
          content.style.width = 0;
          menuAccord.style.transform = "translateX(0)";
        } else {
          item.classList.add("is-active");

          if (windowWidth > breakpointPhone && windowWidth < openMenuWidth) {
            content.style.width = windowWidth - closeMenuWidth + "px";
          } else if (windowWidth <= breakpointPhone) {
            var num = void 0;

            for (var i = 0; i < menuItems.length; i++) {
              if (menuItems[i] == item) {
                num = menuItems.length - (i + 1);
              }
            }
            menuAccord.style.transform = "translateX(" + tarWidth * num + "px)";
            content.style.width = windowWidth - tarWidth + "px";
          } else {
            content.style.width = layoutContentWidth + "px";
          }
        }
      }
    });
  }

  function renderPopup(head, text) {
    var template = document.querySelector('#overlay').content.querySelector('.popup__open');

    var modal = template.cloneNode(true);
    var popupClose = modal.querySelector('#popup-close');

    modal.querySelector('.popup__head').textContent = head;
    modal.querySelector('.popup__text > p').textContent = text;

    document.body.appendChild(modal);

    popupClose.addEventListener('click', function (e) {
      e.preventDefault();
      document.body.removeChild(modal);
    });
  }

  function popupReview() {
    var reviews = document.querySelector('.reviews__list');

    reviews.addEventListener('click', function (e) {
      if (e.target.classList.contains('btn--review')) {
        var that = this;
        var head = that.querySelector('.review__head').textContent;
        var text = that.querySelector('.review__text').textContent;

        renderPopup(head, text);
      }
    });
  }

  function orderForm() {
    var form = document.querySelector('#order-form');

    form.addEventListener('submit', getResponse);

    function getResponse(e) {
      e.preventDefault();

      var url = form.getAttribute('action');
      var type = form.getAttribute('method');
      var formData = new FormData(form);
      var sadSmile = '┌∩┐(◕_◕)┌∩┐';

      fetch(url, { method: type, body: formData }).then(checkStatus).then(function (response) {
        return response.json();
      }).then(function (data) {
        renderPopup(data.name, data.mes);
      }).catch(function (error) {
        renderPopup(sadSmile, error);
      });
    }

    function checkStatus(response) {
      if (response.status >= 200 && response.status < 300) {
        return response;
      } else {
        var error = new Error(response.statusText);
        error.response = response;
        throw error;
      }
    }
  }

  function showIngred() {
    var ingredBadge = document.querySelectorAll('.burger__badge--ingred');
    var burgerDrop = document.querySelectorAll('.burger__dropdown');
    var ingredClose = document.querySelectorAll('.modal__close--ingred');

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = ingredBadge[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var i = _step4.value;

        i.addEventListener('mouseenter', remHidden);
        i.addEventListener('mouseleave', addHidden);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = ingredClose[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _i = _step5.value;

        _i.addEventListener('touchstart', addHidden);
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    function addHidden() {
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = burgerDrop[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var _i2 = _step6.value;

          _i2.classList.add('visually-hidden');
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }

    function remHidden() {
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = burgerDrop[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var _i3 = _step7.value;

          _i3.classList.remove('visually-hidden');
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }
    }
  }

  function mySlider() {

    var next = document.querySelector('.scroll-btn--next');
    var prev = document.querySelector('.scroll-btn--prev');
    var list = document.querySelector('.slider__list');
    var items = list.querySelectorAll('.slider__item');

    next.addEventListener('click', moveNext);
    prev.addEventListener('click', movePrev);

    var num = 2;

    function moveNext() {

      num++;
      if (num > items.length) num = 1;

      setOrder();
      list.classList.remove('is-reverse');
      moveItem();
    }

    function movePrev() {

      num--;
      if (num === 0) num = items.length;

      setOrder();
      list.classList.add('is-reverse');
      moveItem();
    }

    function setOrder() {
      var key = num;

      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = items[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var i = _step8.value;

          i.style.order = key;
          key++;
          if (key > items.length) key = 1;
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }
    }

    function moveItem() {
      list.classList.remove('is-move');

      setTimeout(function () {
        list.classList.add('is-move');
      }, 50);
    }
  }

  function onePageScroll() {
    var wrapper = document.querySelector('.wrapper');
    var content = wrapper.querySelector('.main-content');
    var pages = content.querySelectorAll('.page');
    var points = document.querySelectorAll('.nav-points__item');
    var dataScrollto = document.querySelectorAll('[data-scroll-to]');

    var inScroll = false;

    addNavigation();

    wheel();

    keyPush();

    if (isMobileDevice()) swipe();

    function moveToPage(numPage) {

      var position = numPage * -100 + "%";

      if (inScroll) return;

      inScroll = true;

      addClass(pages);

      content.style.transform = "translateY(" + position + ")";

      setTimeout(function () {
        inScroll = false;
        addClass(points);
      }, 1000); //transition + 300(инерция скролла)

      function addClass(obj) {
        obj[numPage].classList.add('is-active');
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = obj[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var item = _step9.value;

            if (item != obj[numPage]) item.classList.remove('is-active');
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }
      }
    }

    function addNavigation() {
      var _loop = function _loop(iter) {
        iter.addEventListener('click', function (e) {
          e.preventDefault();
          moveToPage(iter.dataset.scrollTo);
        });
      };

      var _iteratorNormalCompletion10 = true;
      var _didIteratorError10 = false;
      var _iteratorError10 = undefined;

      try {
        for (var _iterator10 = dataScrollto[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
          var iter = _step10.value;

          _loop(iter);
        }
      } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion10 && _iterator10.return) {
            _iterator10.return();
          }
        } finally {
          if (_didIteratorError10) {
            throw _iteratorError10;
          }
        }
      }
    }

    function wheel() {
      document.addEventListener('wheel', function (e) {
        var direct = e.deltaY > 0 ? 'up' : 'down';

        scrollToPage(direct);
      });
    }

    function keyPush() {
      document.addEventListener('keydown', function (e) {
        switch (e.keyCode) {
          case 40:
            scrollToPage('up');
            break;
          case 38:
            scrollToPage('down');
            break;
          default:
            break;
        }
      });
    }

    function definePage(obj) {
      for (var i = 0; i < obj.length; i++) {
        var iter = obj[i];
        if (iter.classList.contains('is-active')) {
          return {
            iterIndex: i,
            iterActive: iter,
            iterNext: iter.nextElementSibling,
            iterPrev: iter.previousElementSibling
          };
        }
      }
    }

    function scrollToPage(direct) {
      var page = definePage(pages);

      if (direct === 'up' && page.iterNext) {
        var numPage = page.iterIndex + 1;

        moveToPage(numPage);
      }

      if (direct === 'down' && page.iterPrev) {
        var _numPage = page.iterIndex - 1;
        moveToPage(_numPage);
      }
    }

    function swipe() {
      var touchStartY = 0;
      var touchEndY = 0;

      document.addEventListener('touchstart', function (e) {
        touchStartY = e.changedTouches[0].screenY;
      }, false);

      wrapper.addEventListener('touchmove', function (e) {
        return e.preventDefault();
      });

      document.addEventListener('touchend', function (e) {
        touchEndY = e.changedTouches[0].screenY;
        var direct = swipeDirect();
        scrollToPage(direct);
      }, false);

      function swipeDirect() {
        var dif = touchStartY - touchEndY;
        if (dif > 100) {
          return 'up';
        } else if (dif < -100) {
          return 'down';
        }
      }
    }

    function isMobileDevice() {
      return typeof window.orientation !== "undefined" || navigator.userAgent.indexOf('IEMobile') !== -1;
    }
  }

  window.addEventListener("DOMContentLoaded", function () {
    initMap();

    mobileMenu();

    accordionTeam();

    accordionMenu();

    popupReview();

    showIngred();

    mySlider();

    onePageScroll();

    orderForm();
  });
})();
//# sourceMappingURL=main.min.js.map
